/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Help Menu
 #	author : miyako
 #	2015/11/16
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

namespace Help
{
    BOOL isHelpDisabled;

#if VERSIONWIN
    HWND mdiWindowRef;
#else
#if !__LP64__
    MenuRef helpMenuRef;
#endif
#endif
    
    void enable()
    {
        if(Help::isHelpDisabled)
        {
#if VERSIONMAC	
#if !__LP64__
        //carbon
		MenuRef carbonHelpMenu;
		MenuItemIndex i;
		HMGetHelpMenu(&carbonHelpMenu, &i);
        if(carbonHelpMenu)
        {
            CopyMenuItems(Help::helpMenuRef, 1, CountMenuItems(Help::helpMenuRef), carbonHelpMenu, 0);
            DeleteMenuItem(carbonHelpMenu, CountMenuItems(carbonHelpMenu));
        }
#endif
        //cocoa
        NSMenu *helpMenu = [NSApp helpMenu];
        if(helpMenu)
        {
            for(NSUInteger i = 0; i <[helpMenu numberOfItems]; ++i)
            {
                [helpMenu itemAtIndex:i].hidden = false;
            }
        }
#else
		HMENU mdiHelpRef = GetMenu(Help::mdiWindowRef);
		EnableMenuItem(mdiHelpRef, GetMenuItemCount(mdiHelpRef)-1, MF_BYPOSITION | MF_ENABLED);
		DrawMenuBar(Help::mdiWindowRef);
#endif
        Help::isHelpDisabled = false;
        }
    }
    
    void disable()
    {
        if(!Help::isHelpDisabled)
        {
#if VERSIONMAC	
#if !__LP64__
        //carbon
		MenuRef carbonHelpMenu;
		MenuItemIndex i;
		HMGetHelpMenu(&carbonHelpMenu, &i);
        if(carbonHelpMenu)
        {
            DisposeMenu(carbonHelpMenu);
        }
#endif
        //cocoa
        NSMenu *helpMenu = [NSApp helpMenu];
        if(helpMenu)
        {
            for(NSUInteger i = 0; i <[helpMenu numberOfItems]; ++i)
            {
                [helpMenu itemAtIndex:i].hidden = true;
            }
        }
#else
		HMENU mdiHelpRef = GetMenu(Help::mdiWindowRef);
		EnableMenuItem(mdiHelpRef, GetMenuItemCount(mdiHelpRef)-1, MF_BYPOSITION | MF_DISABLED);
		DrawMenuBar(Help::mdiWindowRef);
#endif
        Help::isHelpDisabled = true;
        }
    }
}

bool IsProcessOnExit(){    
    C_TEXT name;
    PA_long32 state, time;
    PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
    CUTF16String procName(name.getUTF16StringPtr());
    CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
    return (!procName.compare(exitProcName));
}

void OnStartup(){
#if VERSIONMAC	
#if !__LP64__
    //carbon
	MenuRef helpMenu;
	MenuItemIndex i;
	HMGetHelpMenu(&helpMenu, &i);
	DuplicateMenu(helpMenu, &Help::helpMenuRef);
#endif
#else
    //the window class is the folder name of the application 
	Help::mdiWindowRef = NULL;
    wchar_t path[_MAX_PATH] = {0};
    wchar_t * applicationPath = wcscpy(path, (const wchar_t *)PA_GetApplicationFullPath().fString);
	//remove file name (4D.exe)
    PathRemoveFileSpec(path);
	//check instance as well, to be sure
	HINSTANCE h = (HINSTANCE)PA_Get4DHInstance();
	do{
		Help::mdiWindowRef = FindWindowEx(NULL, Help::mdiWindowRef, (LPCTSTR)path, NULL);
		if(Help::mdiWindowRef){
			if(h == (HINSTANCE)GetWindowLongPtr(Help::mdiWindowRef, GWLP_HINSTANCE)){
				break;
			}
		}
	}while(Help::mdiWindowRef);
#endif
    Help::isHelpDisabled = false;
}

void OnCloseProcess(){
    if(IsProcessOnExit()){
        Help::disable();
#if VERSIONMAC	
#if !__LP64__
    DisposeMenu(Help::helpMenuRef);
#endif
#endif
    }
}

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
        case kInitPlugin :
        case kServerInitPlugin :            
            OnStartup();
			break;

        case kCloseProcess :            
            OnCloseProcess();
			break;

// --- Help Menu

		case 1 :
			HELP_SET_ENABLED(pResult, pParams);
			break;

		case 2 :
			HELP_Get_enabled(pResult, pParams);
			break;

	}
}

// ----------------------------------- Help Menu ----------------------------------

void HELP_SET_ENABLED(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	if(Param1.getIntValue())
    {
        Help::enable();
    }else
    {
        Help::disable();
    }

}

void HELP_Get_enabled(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;

	returnValue.setIntValue(!Help::isHelpDisabled);

	returnValue.setReturn(pResult);
}

